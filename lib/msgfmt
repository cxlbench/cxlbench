#!/usr/bin/env bash

# Define string definitions based on whether colors are or are not supported by the terminal
function setup_strings() {
  if [[ "${TERMCOLORS}" = true ]]; then
    STR_PASSED="${green}[ PASSED   ]${normal}"
    STR_WARN="${yellow}[ WARNING  ]${normal}"
    STR_FAIL="${red}[ FAILED   ]${normal}"
    STR_INFO="${magenta}[ INFO     ]${normal}"
    STR_DEBUG="${cyan}[ DEBUG    ]${normal}"
    STR_CRIT="${red}[ CRITICAL ]${normal}"
    STR_SKIPPED="${blue}[ SKIPPED  ]${normal}"
    STR_UNKNOWN="${white}[ UNKNOWN  ]${normal}"
    STR_ERROR="${red}[ ERROR    ]${normal}"
    STR_ERROR="${red}[ FATAL    ]${normal}"
  else
    STR_PASSED="[ PASSED   ]"
    STR_WARN="[ WARNING  ]"
    STR_FAIL="[ FAILED   ]"
    STR_INFO="[ INFO     ]"
    STR_DEBUG="[ DEBUG    ]"
    STR_CRIT="[ CRITICAL ]"
    STR_SKIPPED="[ SKIPPED  ]"
    STR_UNKNOWN="[ UNKNOWN  ]"
    STR_ERROR="[ ERROR    ]"
    STR_ERROR="[ FATAL    ]"
  fi
}

# Auto detect whether the users terminal supports colors
# Sets TERMCOLORS to TRUE or FALSE
function auto_detect_terminal_colors() {
  # Verify STDOUT is a terminal
  if [ -t 1 ]; then
    # If the terminal supports colors, use them.
    # Use the tput command if available. If not, fall back and manually assign colors.
    if [ -z "${TPUT}" ]; then
      # tput is not available. Manually assign colors
      bold="\e[1m"
      underline="\e[4"
      normal="\e[0m"
      black="\e[39m"
      red="\e[31m"
      green="\e[32m"
      yellow="\e[33m"
      blue="\e[34m"
      magenta="\e[35m"
      cyan="\e[36m"
      white="\e[97m"
      default_fg="\e[39m"
      default_bg="\e[49m"
    else 
      # Use tput
      if [[ $(${TPUT} colors) -ge 8 ]]; then
        # Enable terminal colors
        TERMCOLORS=true
        # Define the color scheme using tput
        bold="$(${TPUT} bold)"
        underline="$(${TPUT} smul)"
        standout="$(${TPUT} smso)"
        normal="$(${TPUT} sgr0)" #reset foreground to default
        black="$(${TPUT} setaf 0)"
        red="$(${TPUT} setaf 1)"
        green="$(${TPUT} setaf 2)"
        yellow="$(${TPUT} setaf 3)"
        blue="$(${TPUT} setaf 4)"
        magenta="$(${TPUT} setaf 5)"
        cyan="$(${TPUT} setaf 6)"
        white="$(${TPUT} setaf 7)"
      fi
    fi 
  else
    # This isn't a terminal. Disable colors.
    TERMCOLORS=false
  fi 

  # Call setup_strings to use color or no color
  setup_strings
}

###############################################################################
# Define the message type printing formats
###############################################################################

# Define the string printing formats

_HDR_FMT="%s %s "
_MSG_FMT="${_HDR_FMT} : %s\n"

_DBG_HDR_FMT="%.23s %s%s "
_DBG_MSG_FMT="${_DBG_HDR_FMT}%s\n"

# Utility function to print all messages in the same format
# arg1 = Type of message, INFO, ERROR, FATAL
# arg2 = Message string
# arg3 = Indent size
function print_msg() {
  local indentstr=""
  local msg_type=${1}
  local message=${2}
  local icnt=${3}
  local c
 
  # If an indent size arg is provided, generate the string
  if [[ -n "${icnt}" ]]; then 
    # Verify it's a positive number
    local re='^[0-9]+$'
    if [[ "${icnt}" =~ $re ]] ; then
      for (( c=1; c<=${icnt}; c++ )); do
        indentstr+=" "
      done
    fi
  fi

  echo "${indentstr}${msg_type} ${FUNCNAME[1]} : ${message}"
}

# Print INFO messages with the function name and optional string message
function info_msg() {
  print_msg "${STR_INFO}" "${1}" ${2}
}

# Print WARNING messages with the function name and optional string message
function warn_msg() {
  print_msg "${STR_WARN}" "${1}" ${2}
}

# Print CRITICAL messages with the function name and optional string message
function crit_msg() {
  print_msg "${STR_CRIT}" "${1}" ${2}
}

# Print SKIPPED messages with the function name and optional string message
function skipped_msg() {
  print_msg "${STR_SKIPPED}" "${1}" ${2}
}

# Print PASSED messages with the function name and optional string message
function passed_msg() {
  print_msg "${STR_PASSED}" "${1}" ${2}
}

# Print FAILED messages with the function name and optional string message
function failed_msg() {
  print_msg "${STR_FAIL}" "${1}" ${2}
}

# Print UNKNOWN messages with the function name and optional string message
function unknown_msg() {
  print_msg "${STR_UNKNOWN}" "${1}" ${2}
}

# Print ERROR messages with the function name and optional string message
function error_msg() {
  print_msg "${STR_ERROR}" "${1}" ${2}
}

# Print ERROR messages with the function name and optional string message
function fatal_msg() {
  print_msg "${STR_FATAL}" "${1}" ${2}
}

# Print Debug messages with date/time, function name, line number, and optional string message
function debug_msg() {
  printf "$_DBG_MSG_FMT" $(date +%F.%T.%N) ${STR_DEBUG} ${BASH_SOURCE[1]##*/}:${FUNCNAME[1]}[${BASH_LINENO[0]}] "${@}"
}